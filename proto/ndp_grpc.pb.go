// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NdpClient is the client API for Ndp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NdpClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type ndpClient struct {
	cc grpc.ClientConnInterface
}

func NewNdpClient(cc grpc.ClientConnInterface) NdpClient {
	return &ndpClient{cc}
}

func (c *ndpClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/Ndp/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NdpServer is the server API for Ndp service.
// All implementations must embed UnimplementedNdpServer
// for forward compatibility
type NdpServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedNdpServer()
}

// UnimplementedNdpServer must be embedded to have forward compatible implementations.
type UnimplementedNdpServer struct {
}

func (UnimplementedNdpServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNdpServer) mustEmbedUnimplementedNdpServer() {}

// UnsafeNdpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NdpServer will
// result in compilation errors.
type UnsafeNdpServer interface {
	mustEmbedUnimplementedNdpServer()
}

func RegisterNdpServer(s grpc.ServiceRegistrar, srv NdpServer) {
	s.RegisterService(&Ndp_ServiceDesc, srv)
}

func _Ndp_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NdpServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ndp/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NdpServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ndp_ServiceDesc is the grpc.ServiceDesc for Ndp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ndp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ndp",
	HandlerType: (*NdpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Ndp_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ndp.proto",
}
